#Import packages

from datetime import datetime
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
import numpy as np
import pandas as pd
import os, glob
import pathlib

#Data Digestion Functions

def IGA_Import(file):
    df_header = pd.read_csv(file,sep='= ',nrows=33,header=None)
    df = pd.read_csv(file,delim_whitespace=True,skiprows=35,skipfooter=1,header=None,engine='python')
    header = df_header[1].values.tolist()
    df.columns = header
    return(df)

def LogSplitter(df,ads_time=30, des_time=120,):
    Total_Run = df.where(df['Time (minute)'] < ads_time+des_time).dropna()
    Adsorption = Total_Run.where(Total_Run['Time (minute)'] < ads_time).dropna()
    Desorption = Total_Run.iloc[Adsorption.index[-1]+1:]
    return(Total_Run.reset_index(),Adsorption.reset_index(), Desorption.reset_index())

#Data Transformation Functions

def CarbonCapture(Adsorption, Desorption):
    Adsorbed_Mass_Uptake = (
        (Adsorption['Total Weight (mg)'].max()-Adsorption['Total Weight (mg)'].min())/
        (Adsorption['Total Weight (mg)'].min())*100)
    p_H2O = 18.016*((Desorption['H2O (torr)']/Desorption['N2 (torr)']).sum())
    p_CO2 = 44.01*((Desorption['CO2 (torr)']/Desorption['N2 (torr)']).sum())
    CO2_Fraction = p_CO2/(p_H2O+p_CO2)
    CapturedCarbon = CO2_Fraction*Adsorbed_Mass_Uptake
    return(Adsorbed_Mass_Uptake,CapturedCarbon, CO2_Fraction)

def RelativeHumidity(Adsorption):
    A,B,C = (8.07131,1730.63,233.426) # Antoine Equation Paramters
    T_VG1 = Adsorption['VG1 Temp (°C)']
    T_Sample = Adsorption['Sample Temp (°C)']
    #Saturation Vapor Pressure of the Sample Chamber (torr)
    P_0 = 10**(       
        A-(B/(C+T_Sample))) 
    #Vapor Pressure Generated by the MFCs (torr)
    P = 10**(
        A-(B/(C+T_VG1)))*(Adsorption['Inlet A NITROGEN (ml/min)']/
                          (Adsorption['Inlet A NITROGEN (ml/min)']+
                           Adsorption['Inlet B NITROGEN (ml/min)']+
                           Adsorption['Inlet D NITROGEN (ml/min)'])) 
    RH = (P/P_0)*100
    meanRH = sum(RH) / len(RH)
    varianceRH = (sum([((x - meanRH) ** 2) for x in RH]) / len(RH))**0.5 
    return(meanRH, varianceRH)

def MassSpecEval(Adsorption):
    H2O, CO2, N2 = Adsorption['H2O (torr)'], Adsorption['CO2 (torr)'], Adsorption['N2 (torr)']
    Water_Signal = H2O/N2
    CarbonDioxide_Signal = CO2/N2
    return(Water_Signal.max(), Water_Signal[0])

#Data Analytics

def IGA_Transform(file, ads_time=30, des_time=30+120):
    Raw_Data = IGA_Import(file)
    print(file)
    
    Data, Adsorption, Desorption = LogSplitter(Raw_Data, ads_time, des_time)
    
    Water_MS, Water_MS0 = MassSpecEval(Adsorption)
    print('max. water conc. in Mass Spec: ',Water_MS)
    print('min. water conc. in Mass Spec: ',Water_MS0)
    
    RH, SD = RelativeHumidity(Adsorption)
    print('Relative Humidity: ',RH,'%(+/-',SD,')')
    
    Adsorbed_Mass_Uptake, CapturedCarbon, CO2_Fraction = CarbonCapture(Adsorption, Desorption)
    print('Total Mass Uptake: ', Adsorbed_Mass_Uptake, ' wt.%')
    print('CO2 Fraction: ', CO2_Fraction)
    print('Carbon Captured: ', CapturedCarbon, 'wt.% CO2')
    
    Processed_Uptake = ((Adsorption['Total Weight (mg)']/Adsorption['Total Weight (mg)'].min())-1)*100
    Processed_DataFrame = pd.concat([Adsorption['Time (minute)'],Processed_Uptake],axis=1)
    Processed_DataFrame.columns = ['Time_'+str(ads_time), 'Uptake_'+str(ads_time)]
    
    print('\n')
    return(Processed_DataFrame, CapturedCarbon)

def Batch_IGA_Transform(path, time=[60,120,30,240,480], colorwheel=['tab:green','b','#9A23FC','r','k','#f2c922'], 
                        User='Dan', Comment='PDendrimer_75%RH_400ppmCO2_AdsorptionProfiles_293K'):
    Today = datetime.today().strftime('%Y%m%d')
    All_Data = pd.DataFrame()
    CO2 = []
    file = glob.glob(path+'*txt')
    for i,j in zip(file, time):
        a,b = IGA_Transform(i,j, j+120)
        All_Data = pd.concat([All_Data,a],axis=1)
        CO2.append(b)
    fig_time = sorted(time,reverse=True)
    f = plt.figure()
    f.set_size_inches(3.33, 3.33, forward=True)
    gs0 = gridspec.GridSpec(1, 1, figure=f)
    G00 = gridspec.GridSpecFromSubplotSpec(nrows=1, ncols=1,subplot_spec=gs0[0],wspace=0.44, hspace=0)
    ax01 = plt.subplot(G00[0,0])
    for i,j in zip(fig_time,colorwheel):
        ax01.plot(All_Data['Time_'+str(i)].iloc[::600], All_Data['Uptake_'+str(i)].iloc[::600],
                  marker='o',ms=8,mec='k',mfc=j,ls='none')
        df = pd.DataFrame(
            pd.concat(
                [All_Data['Time_'+str(i)],All_Data['Uptake_'+str(i)]],axis=1)).dropna().T.to_json(
            Today+'_'+User+'_'+Comment+'_'+str(i)+'.json',orient='split'
        )
    ax01.plot(time,CO2,marker='o',ms=8,mec='k',mfc=colorwheel[-1],ls='none',label='CO$_{2}$ Uptake')
    ax01.legend(edgecolor='k',facecolor='w', framealpha=1)
    ax01.set_ylabel('Uptake / wt. %')
    ax01.set_xlabel('Time / minutes')
        
    plt.savefig(Today+'_'+User+'_'+Comment+'.svg', format='svg')
    plt.show()
    return('Batch Analysis Complete!')
